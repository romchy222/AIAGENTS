#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –¥–ª—è BolashakChat
Deployment Readiness Check Script for BolashakChat

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–µ–ø–ª–æ—é.
"""

import os
import sys
import importlib.util
import subprocess
import json
from datetime import datetime


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 11):
        return False, f"–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.11+, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {version.major}.{version.minor}"
    return True, f"Python {version.major}.{version.minor}.{version.micro}"


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_packages = [
        'flask', 'flask_sqlalchemy', 'flask_cors', 'gunicorn', 
        'sqlalchemy', 'requests', 'werkzeug', 'psycopg2'
    ]
    
    missing = []
    installed = []
    
    for package in required_packages:
        try:
            spec = importlib.util.find_spec(package)
            if spec is None:
                missing.append(package)
            else:
                installed.append(package)
        except ImportError:
            missing.append(package)
    
    if missing:
        return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing)}"
    return True, f"–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ({len(installed)} –ø–∞–∫–µ—Ç–æ–≤)"


def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    required_files = [
        'app.py', 'models.py', 'views.py', 'admin.py', 'auth.py',
        'pyproject.toml', '.env.example'
    ]
    
    required_dirs = [
        'templates', 'static', '.github/workflows'
    ]
    
    missing_files = []
    missing_dirs = []
    
    for file in required_files:
        if not os.path.isfile(file):
            missing_files.append(file)
    
    for dir_path in required_dirs:
        if not os.path.isdir(dir_path):
            missing_dirs.append(dir_path)
    
    if missing_files or missing_dirs:
        issues = []
        if missing_files:
            issues.append(f"—Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        if missing_dirs:
            issues.append(f"–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {', '.join(missing_dirs)}")
        return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {'; '.join(issues)}"
    
    return True, "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"


def check_application_startup():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ
        sys.path.insert(0, os.getcwd())
        
        import app
        test_app = app.create_app()
        
        with test_app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            from app import db
            db.create_all()
            
        return True, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫"
        
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}"


def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_for_production = [
        'DATABASE_URL', 'SESSION_SECRET', 'MISTRAL_API_KEY'
    ]
    
    missing = []
    for var in required_for_production:
        if not os.environ.get(var):
            missing.append(var)
    
    if missing:
        return False, f"–î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è: {', '.join(missing)}"
    return True, "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"


def check_security_configuration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    if os.path.exists('.env'):
        issues.append(".env —Ñ–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .gitignore
    if os.path.exists('.gitignore'):
        with open('.gitignore', 'r') as f:
            gitignore_content = f.read()
            if '.env' not in gitignore_content:
                issues.append(".env –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ .gitignore")
    else:
        issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .gitignore —Ñ–∞–π–ª")
    
    if issues:
        return False, '; '.join(issues)
    return True, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"


def check_ci_cd_configuration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CI/CD"""
    workflow_files = [
        '.github/workflows/cicd.yml',
        '.github/workflows/static.yml'
    ]
    
    existing_workflows = []
    for workflow in workflow_files:
        if os.path.exists(workflow):
            existing_workflows.append(workflow)
    
    if not existing_workflows:
        return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç GitHub Actions workflows"
    
    return True, f"–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã workflows: {', '.join(existing_workflows)}"


def generate_deployment_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é"""
    print("üöÄ === –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –î–ï–ü–õ–û–Æ BOLASHAKCHAT ===\n")
    
    checks = [
        ("üêç –í–µ—Ä—Å–∏—è Python", check_python_version),
        ("üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_dependencies),
        ("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", check_project_structure),
        ("üèÉ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", check_application_startup),
        ("üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment_variables),
        ("üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", check_security_configuration),
        ("üîÑ CI/CD –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", check_ci_cd_configuration),
    ]
    
    results = []
    all_passed = True
    
    for check_name, check_func in checks:
        try:
            passed, message = check_func()
            status = "‚úÖ" if passed else "‚ùå"
            print(f"{status} {check_name}: {message}")
            
            results.append({
                'check': check_name,
                'passed': passed,
                'message': message
            })
            
            if not passed:
                all_passed = False
                
        except Exception as e:
            print(f"‚ùå {check_name}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {str(e)}")
            results.append({
                'check': check_name,
                'passed': False,
                'message': f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"
            })
            all_passed = False
    
    print("\n" + "="*60)
    
    if all_passed:
        print("‚úÖ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ!")
        print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–µ–ø–ª–æ—è:")
        print("1. üèóÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Gunicorn –∫–∞–∫ WSGI —Å–µ—Ä–≤–µ—Ä")
        print("2. üóÑÔ∏è  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ PostgreSQL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
        print("3. üåê –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Nginx –∫–∞–∫ reverse proxy")
        print("4. üîí –í–∫–ª—é—á–∏—Ç–µ HTTPS –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
        print("5. üìä –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("6. üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        exit_code = 0
    else:
        print("‚ùå –ü–†–û–ï–ö–¢ –ù–ï –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.")
        exit_code = 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ JSON
    report = {
        'timestamp': datetime.now().isoformat(),
        'overall_status': 'ready' if all_passed else 'not_ready',
        'checks': results
    }
    
    with open('deployment_readiness_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ deployment_readiness_report.json")
    
    return exit_code


if __name__ == "__main__":
    exit_code = generate_deployment_report()
    sys.exit(exit_code)