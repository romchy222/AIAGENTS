#!/usr/bin/env python3
"""
Test script to demonstrate frontend-backend agent connections.
This script simulates the flow from frontend to backend agents.
"""

import sys
import os
sys.path.append('/home/runner/work/AIAGENTS/AIAGENTS')

def test_agent_routing():
    """Test the agent routing functionality."""
    
    print("=" * 60)
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–í–Ø–ó–ò –§–†–û–ù–¢–ï–ù–î-–ê–ì–ï–ù–¢–û–í –° –ë–≠–ö–ï–ù–î–û–ú")
    print("=" * 60)
    
    try:
        # Import agents module
        from agents import AgentRouter, AgentType
        
        # Initialize router
        print("\n1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AgentRouter...")
        router = AgentRouter()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(router.agents)}")
        
        # Display available agents
        print("\n2. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:")
        agents_info = router.get_available_agents()
        for i, agent in enumerate(agents_info, 1):
            print(f"   {i}. {agent['name']} ({agent['type']})")
            print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {agent['description']}")
        
        # Test message routing
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:")
        test_messages = [
            ("–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç?", "–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ"),
            ("–ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—É—Å–∫?", "–∫–∞–¥—Ä—ã"),
            ("–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π?", "—É—á–µ–±–∞"),
            ("–ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –≤—ã–ø—É—Å–∫–∞", "–∫–∞—Ä—å–µ—Ä–∞"),
            ("–ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞—Å–µ–ª–µ–Ω–∏–µ–º –≤ –æ–±—â–µ–∂–∏—Ç–∏–µ", "–æ–±—â–µ–∂–∏—Ç–∏–µ"),
            ("–ö–æ–Ω—Ç–∞–∫—Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞", "–æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
        ]
        
        for message, expected_category in test_messages:
            print(f"\n   üìù –°–æ–æ–±—â–µ–Ω–∏–µ: '{message}'")
            print(f"   üéØ –û–∂–∏–¥–∞–µ–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {expected_category}")
            
            # Route message
            result = router.route_message(message, "ru")
            
            if result:
                print(f"   ‚úÖ –í—ã–±—Ä–∞–Ω –∞–≥–µ–Ω—Ç: {result.get('agent_name', 'Unknown')}")
                print(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 0):.2f}")
                print(f"   üîß –¢–∏–ø –∞–≥–µ–Ω—Ç–∞: {result.get('agent_type', 'unknown')}")
                print(f"   üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: {result.get('context_used', False)}")
                # Show first 100 chars of response
                response = result.get('response', 'No response')
                if len(response) > 100:
                    response = response[:100] + "..."
                print(f"   üí¨ –û—Ç–≤–µ—Ç: {response}")
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞")
        
        # Test confidence scoring for specific agents
        print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:")
        test_confidence_messages = [
            "–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç",
            "–∫–∞–¥—Ä–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
            "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π",
            "–ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã",
            "–æ–±—â–µ–∂–∏—Ç–∏–µ"
        ]
        
        for msg in test_confidence_messages:
            print(f"\n   –°–æ–æ–±—â–µ–Ω–∏–µ: '{msg}'")
            for agent in router.agents:
                confidence = agent.can_handle(msg, "ru")
                print(f"   - {agent.name}: {confidence:.2f}")
        
        print("\n" + "=" * 60)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
        print("üîó Frontend-Backend —Å–≤—è–∑–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("=" * 60)
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã")

def test_api_endpoints():
    """Test API endpoint accessibility."""
    
    print("\n" + "=" * 60)
    print("üåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –≠–ù–î–ü–û–ò–ù–¢–û–í")
    print("=" * 60)
    
    try:
        # Test app creation and agent info endpoint simulation
        from app import create_app
        from views import initialize_agent_router
        
        print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        app = create_app()
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        print("\n2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤...")
        with app.app_context():
            router = initialize_agent_router()
            agents_info = router.get_available_agents()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {len(agents_info)} –∞–≥–µ–Ω—Ç–∞—Ö")
            
            # Simulate /api/agents endpoint response
            api_response = {
                'agents': agents_info,
                'total_agents': len(agents_info)
            }
            print(f"\nüìä –û—Ç–≤–µ—Ç /api/agents:")
            print(f"   –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {api_response['total_agents']}")
            for agent in api_response['agents']:
                print(f"   - {agent['name']} ({agent['type']})")
        
        print("\n‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")

def main():
    """Main test function."""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è BolashakChat Agent System")
    
    # Test 1: Agent routing functionality
    test_agent_routing()
    
    # Test 2: API endpoints
    test_api_endpoints()
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìã –í–´–í–û–î–´:")
    print("   ‚úÖ –ê–≥–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è")
    print("   ‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
    print("   ‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –¥–∞–Ω–Ω—ã–µ")
    print("   ‚úÖ Frontend-Backend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")

if __name__ == "__main__":
    main()